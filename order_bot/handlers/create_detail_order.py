from aiogram import Bot
from aiogram.types import (
    Message,
    CallbackQuery
)
from aiogram.fsm.context import FSMContext

from order_bot.handlers.add_car import add_vin_code_start
from order_bot.handlers.registration import start_register
from order_bot.keyboards.choose_my_car_for_detail_kb import user_cars_kb
from order_bot.utils.check_if_user_exist import handle_user_existence
from order_bot.utils.db_utils import get_user_cars_sync, create_order_db
from users.models import SalesDepartment

from asgiref.sync import sync_to_async


async def start_create_detail_order(
        message: Message,
        state: FSMContext,
        bot: Bot
):
    await state.clear()
    telegram_user_id = message.from_user.id
    user_exists = await handle_user_existence(telegram_user_id)
    user_cars = await get_user_cars_sync(telegram_user_id)

    if user_exists:
        if user_cars:
            keyboard_markup = await user_cars_kb(telegram_user_id)
            await bot.send_message(
                message.from_user.id,
                "–û–±–µ—Ä—ñ—Ç—å üöô –∞–≤—Ç–æ:",
                reply_markup=keyboard_markup
            )
        else:
            await bot.send_message(
                message.from_user.id,
                "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –∞–≤—Ç–æ."
            )

            await add_vin_code_start(
                message=message,
                state=state,
                bot=bot
            )
    else:
        await bot.send_message(
            message.from_user.id,
            "–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ç—Ä–µ–±–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å...",
        )
        await start_register(message, state, bot)


async def create_repair_order(
        callback_query: CallbackQuery,
        state: FSMContext,
):
    await state.clear()
    vin_code = callback_query.data[len('create_repair_order_'):]
    print(vin_code)

    try:
        sales_department = await sync_to_async(
            SalesDepartment.objects.get
        )(name="Repair")
    except SalesDepartment.DoesNotExist:
        await callback_query.message.edit_text(
            f"–í—ñ–¥–¥—ñ–ª 'Repair' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
        )
        await callback_query.answer()
        return

    if vin_code:
        order = await create_order_db(
            vin_code=vin_code,
            sales_department=sales_department
        )
        await callback_query.message.edit_reply_markup(reply_markup=None)
        if order:
            await callback_query.message.answer(
                f"üëå –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –¥–ª—è –≤–∞—à–æ–≥–æ –∞–≤—Ç–æ: \n\n"
                f"üöô VIN - {vin_code}\n\n"
                f"C–∫–æ—Ä–æ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—Å—è –∑ –≤–∞–º–∏!",
            )
        else:
            await callback_query.message.edit_text(
                f"–ù–µ –≤–¥–∞–ª–æ—Å—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–æ–≤–ª–µ–Ω—è.",
            )
    else:
        await callback_query.message.edit_text(
            f"–ù–µ –≤–¥–∞–ª–æ—Å—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω—è.",
        )

    await callback_query.answer()


async def create_detail_order(
        callback_query: CallbackQuery,
        state: FSMContext
):
    await state.clear()
    vin_code = callback_query.data[len('create_detail_order_'):]
    print(vin_code)

    try:
        sales_department = await sync_to_async(
            SalesDepartment.objects.get
        )(name="Detail")
    except SalesDepartment.DoesNotExist:
        await callback_query.message.edit_text(
            f"–í—ñ–¥–¥—ñ–ª 'Detail' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
        )
        await callback_query.answer()
        return

    if vin_code:
        order = await create_order_db(
            vin_code=vin_code,
            sales_department=sales_department
        )
        await callback_query.message.edit_reply_markup(reply_markup=None)
        if order:
            await callback_query.message.answer(
                f"üëå –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –¥–ª—è –≤–∞—à–æ–≥–æ –∞–≤—Ç–æ: \n\n"
                f"üöô VIN - {vin_code}\n\n"
                f"C–∫–æ—Ä–æ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—Å—è –∑ –≤–∞–º–∏!",
            )
        else:
            await callback_query.message.edit_text(
                f"–ù–µ –≤–¥–∞–ª–æ—Å—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–æ–≤–ª–µ–Ω—è.",
            )
    else:
        await callback_query.message.edit_text(
            f"–ù–µ –≤–¥–∞–ª–æ—Å—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω—è.",
        )

    await callback_query.answer()
